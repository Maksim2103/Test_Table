{"version":3,"sources":["Components/Loader/Loader.js","Components/ButtonsPanel/ButtonPanel.js","Components/DirectionSort/DirectionSort.js","Components/ModalAddUser/ModalAddUser.js","Components/TableData/TableData.js","Components/SearchPanel/SearchPanel.js","Components/PaginationPanel/PaginationPanel.js","Components/RowUser/RowUser.js","Pages/HomePage/HomePage.js","App.js","index.js"],"names":["Loader","className","Spinner","animation","variant","ButtonPanel","handleToggleSizeData","Button","onClick","DirectionSort","direction","ModalAddUser","addContactData","useState","show","setShow","handleClose","idValue","setIdValue","firstNameValue","setFirstNameValue","lastNameValue","setLastNameValue","emailValue","setEmailValue","phoneValue","setPhoneValue","Modal","onHide","Header","closeButton","Title","Body","Form","onChange","e","value","target","id","onSubmit","preventDefault","firstName","lastName","email","phone","address","streetAddress","city","state","zip","description","Group","controlId","Label","Control","type","placeholder","TableData","sortTable","data","targetValue","setAddContact","getTableRowId","Container","fluid","Table","striped","bordered","hover","map","row","SearchPanel","handlerSearchInput","inputValue","setInputValue","InputGroup","FormControl","aria-label","aria-describedby","val","Append","PaginationPanel","pages","handleClickPage","handlePaginationPages","currentPage","href","page","length","RowUser","CardGroup","Card","Text","HomePage","rowData","setRowData","showRow","setShowRow","smallApiUrl","App","apiUrl","setApiUrl","contactData","setContactData","isLoading","setIsLoading","useEffect","a","fetch","response","json","results","getContacts","serchValue","setSerchValue","dataAfterFilter","filter","contact","Object","values","some","String","includes","setCurrentPage","indexOfLastElement","useMemo","indexOfFirstElement","dataPerPage","slice","totalPages","Math","ceil","i","push","setTargetValue","setDirection","addContact","dataAfterAddContact","url","sort","b","innerText","con","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.76b089b8.chunk.js","sourcesContent":["import Spinner from 'react-bootstrap/Spinner';\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"d-flex justify-content-center\">\r\n      <strong>Loading... please wait</strong>\r\n      <Spinner animation=\"border\" variant=\"primary\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import Button from 'react-bootstrap/Button';\r\n\r\nconst ButtonPanel = ({ handleToggleSizeData }) => {\r\n  return (\r\n    <div className=\"d-flex justify-content-end p-3\">\r\n      <Button\r\n        onClick={() => handleToggleSizeData('big')}\r\n        variant=\"outline-primary\"\r\n      >\r\n        Большие данные (1000 строк)\r\n      </Button>\r\n      <Button\r\n        onClick={() => handleToggleSizeData('small')}\r\n        className=\"ml-2\"\r\n        variant=\"outline-primary\"\r\n      >\r\n        Маленькие данные (32 строки)\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonPanel;\r\n","import { FaSortAmountDownAlt, FaSortAmountUpAlt } from 'react-icons/fa';\r\n\r\nconst DirectionSort = ({ direction }) => {\r\n  return (\r\n    <>\r\n      {direction === 'asc' ? (\r\n        <FaSortAmountUpAlt />\r\n      ) : direction === 'desc' ? (\r\n        <FaSortAmountDownAlt />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DirectionSort;\r\n","import { useState } from 'react';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nconst ModalAddUser = ({ addContactData }) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const [idValue, setIdValue] = useState('');\r\n  const [firstNameValue, setFirstNameValue] = useState('');\r\n  const [lastNameValue, setLastNameValue] = useState('');\r\n  const [emailValue, setEmailValue] = useState('');\r\n  const [phoneValue, setPhoneValue] = useState('');\r\n\r\n  const handlerOnChangeForm = (e) => {\r\n    const value = e.target.value;\r\n    const valueId = e.target.id;\r\n    switch (valueId) {\r\n      case 'formBasicId':\r\n        return setIdValue(value);\r\n      case 'formBasicFirstName':\r\n        return setFirstNameValue(value);\r\n      case 'formBasicLastName':\r\n        return setLastNameValue(value);\r\n      case 'formBasicEmail':\r\n        return setEmailValue(value);\r\n      case 'formBasicPhone':\r\n        return setPhoneValue(value);\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const submitNewUser = (e) => {\r\n    e.preventDefault();\r\n    addContactData({\r\n      id: idValue,\r\n      firstName: firstNameValue,\r\n      lastName: lastNameValue,\r\n      email: emailValue,\r\n      phone: phoneValue,\r\n      address: {\r\n        streetAddress: 'не указан',\r\n        city: 'не указан',\r\n        state: 'не указана',\r\n        zip: 'не указан',\r\n      },\r\n      description: 'et lacus magna dolor...',\r\n    });\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"primary\" onClick={handleShow}>\r\n        Добавить\r\n      </Button>\r\n\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Add user</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onChange={handlerOnChangeForm} onSubmit={submitNewUser}>\r\n            <Form.Group controlId=\"formBasicId\">\r\n              <Form.Label>Id</Form.Label>\r\n              <Form.Control type=\"number\" placeholder=\"Enter id here\" />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formBasicFirstName\">\r\n              <Form.Label>FirstName</Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"Enter FirstName here\" />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formBasicLastName\">\r\n              <Form.Label>LastName</Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"Enter LastName here\" />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control type=\"email\" placeholder=\"Enter email here\" />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formBasicPhone\">\r\n              <Form.Label>Phone</Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"Enter phone here\" />\r\n            </Form.Group>\r\n            {idValue &&\r\n              firstNameValue &&\r\n              lastNameValue &&\r\n              emailValue &&\r\n              phoneValue && (\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  Submit\r\n                </Button>\r\n              )}\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModalAddUser;\r\n","import Table from 'react-bootstrap/Table';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nimport DirectionSort from '../DirectionSort/DirectionSort';\r\nimport ModalAddUser from '../ModalAddUser/ModalAddUser';\r\n\r\nconst TableData = ({\r\n  direction,\r\n  sortTable,\r\n  data,\r\n  targetValue,\r\n  setAddContact,\r\n  addContactData,\r\n  getTableRowId,\r\n}) => {\r\n  return (\r\n    <Container fluid=\"xl\">\r\n      <div className=\"d-flex justify-content-end\">\r\n        <ModalAddUser\r\n          setAddContact={setAddContact}\r\n          addContactData={addContactData}\r\n        />\r\n      </div>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th id=\"id\" onClick={(e) => sortTable('id')}>\r\n              id\r\n              {targetValue === 'id' ? (\r\n                <DirectionSort direction={direction} />\r\n              ) : null}\r\n            </th>\r\n            <th id=\"firstName\" onClick={(e) => sortTable('firstName')}>\r\n              First Name\r\n              {targetValue === 'firstName' ? (\r\n                <DirectionSort direction={direction} />\r\n              ) : null}\r\n            </th>\r\n            <th id=\"lastName\" onClick={(e) => sortTable('lastName')}>\r\n              Last Name\r\n              {targetValue === 'lastName' ? (\r\n                <DirectionSort direction={direction} />\r\n              ) : null}\r\n            </th>\r\n            <th id=\"email\" onClick={(e) => sortTable('email')}>\r\n              Email\r\n              {targetValue === 'email' ? (\r\n                <DirectionSort direction={direction} />\r\n              ) : null}\r\n            </th>\r\n            <th id=\"phone\" onClick={(e) => sortTable('phone')}>\r\n              Phone\r\n              {targetValue === 'phone' ? (\r\n                <DirectionSort direction={direction} />\r\n              ) : null}\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.map((row) => (\r\n            <tr key={row.id} id={row.id} onClick={() => getTableRowId(row)}>\r\n              <td>{row.id}</td>\r\n              <td>{row.firstName}</td>\r\n              <td>{row.lastName}</td>\r\n              <td>{row.email}</td>\r\n              <td>{row.phone}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TableData;\r\n","import { useState } from 'react';\r\n\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Container from 'react-bootstrap/esm/Container';\r\n\r\nconst SearchPanel = ({ handlerSearchInput }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handlerInput = (val) => {\r\n    setInputValue(val);\r\n  };\r\n  return (\r\n    <Container fluid=\"xl\">\r\n      <InputGroup className=\"mb-3\">\r\n        <FormControl\r\n          placeholder=\"Поиск...\"\r\n          aria-label=\"Search by\"\r\n          aria-describedby=\"basic-addon2\"\r\n          onChange={(e) => {\r\n            handlerInput(e.target.value);\r\n          }}\r\n          value={inputValue}\r\n        />\r\n        <InputGroup.Append>\r\n          <Button\r\n            variant=\"outline-secondary\"\r\n            onClick={() => {\r\n              handlerSearchInput(inputValue);\r\n            }}\r\n          >\r\n            Найти\r\n          </Button>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SearchPanel;\r\n","import Container from 'react-bootstrap/Container';\r\n\r\nconst PaginationPanel = ({\r\n  pages,\r\n  handleClickPage,\r\n  handlePaginationPages,\r\n  currentPage,\r\n}) => {\r\n  return (\r\n    <Container className=\"d-flex justify-content-center\" fluid=\"xl\">\r\n      <nav aria-label=\"Page navigation\" onClick={handlePaginationPages}>\r\n        <ul className=\"pagination\">\r\n          <li\r\n            className={currentPage === 1 ? 'page-item disabled' : 'page-item'}\r\n          >\r\n            <a className=\"page-link\" href=\"#section\">\r\n              Previous\r\n            </a>\r\n          </li>\r\n          {pages.map((page) => (\r\n            <li\r\n              className={\r\n                currentPage === page ? 'page-item active' : 'page-item'\r\n              }\r\n              onClick={() => handleClickPage(page)}\r\n              key={page}\r\n            >\r\n              <a className=\"page-link\" href=\"#section\">\r\n                {page}\r\n              </a>\r\n            </li>\r\n          ))}\r\n          <li\r\n            className={\r\n              currentPage === pages.length ? 'page-item disabled' : 'page-item'\r\n            }\r\n          >\r\n            <a className=\"page-link\" href=\"#section\">\r\n              Next\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PaginationPanel;\r\n","import { Card, CardGroup } from 'react-bootstrap/';\r\n\r\nconst RowUser = ({ data }) => {\r\n  return (\r\n    <CardGroup>\r\n      <Card>\r\n        <Card.Body className=\"d-flex flex-column justify-content-between \">\r\n          <Card.Text>\r\n            Выбран пользователь:\r\n            <b>\r\n              {data.firstName} {data.lastName}\r\n            </b>\r\n          </Card.Text>\r\n          <Card.Text>\r\n            <b>Описание:</b>\r\n            <br /> {data.description}\r\n          </Card.Text>\r\n          <Card.Text>\r\n            Адрес проживания: <b> {data.address.streetAddress} </b>\r\n          </Card.Text>\r\n          <Card.Text>\r\n            Город: <b> {data.address.city} </b>\r\n          </Card.Text>\r\n          <Card.Text>\r\n            Провинция: <b> {data.address.state} </b>\r\n          </Card.Text>\r\n          <Card.Text>\r\n            Индекс: <b> {data.address.zip} </b>\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    </CardGroup>\r\n  );\r\n};\r\n\r\nexport default RowUser;\r\n","import { useState } from 'react';\r\n\r\nimport ButtonPanel from '../../Components/ButtonsPanel/ButtonPanel';\r\nimport TableData from '../../Components/TableData/TableData';\r\nimport SearchPanel from '../../Components/SearchPanel/SearchPanel';\r\nimport PaginationPanel from '../../Components/PaginationPanel/PaginationPanel';\r\nimport RowUser from '../../Components/RowUser/RowUser';\r\n\r\nconst HomePage = ({\r\n  data,\r\n  handleToggleSizeData,\r\n  pages,\r\n  handleClickPage,\r\n  sortTable,\r\n  direction,\r\n  targetValue,\r\n  handlerSearchInput,\r\n  handlePaginationPages,\r\n  currentPage,\r\n  setAddContact,\r\n  addContactData,\r\n}) => {\r\n  const [rowData, setRowData] = useState({});\r\n  const [showRow, setShowRow] = useState(false);\r\n\r\n  const getTableRowId = (row) => {\r\n    row && setRowData(row);\r\n    setShowRow(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ButtonPanel handleToggleSizeData={handleToggleSizeData} />\r\n      <SearchPanel handlerSearchInput={handlerSearchInput} />\r\n      <TableData\r\n        data={data}\r\n        sortTable={sortTable}\r\n        direction={direction}\r\n        targetValue={targetValue}\r\n        setAddContact={setAddContact}\r\n        addContactData={addContactData}\r\n        getTableRowId={getTableRowId}\r\n      />\r\n      <PaginationPanel\r\n        pages={pages}\r\n        handleClickPage={handleClickPage}\r\n        handlePaginationPages={handlePaginationPages}\r\n        currentPage={currentPage}\r\n      />\r\n      {showRow && <RowUser data={rowData} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n\r\n//test\r\n","import { useState, useMemo, useEffect } from 'react';\n\nimport Loader from './Components/Loader/Loader';\n\nimport Container from 'react-bootstrap/Container';\nimport HomePage from './Pages/HomePage/HomePage';\n\nconst smallApiUrl =\n  'http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D';\n\nconst bigApiUrl =\n  'http://www.filltext.com/?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&delay=3&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D';\n\nfunction App() {\n  const [apiUrl, setApiUrl] = useState(smallApiUrl);\n  const [contactData, setContactData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const getContacts = async () => {\n      try {\n        setIsLoading(true);\n        const response = await fetch(apiUrl);\n        const results = await response.json();\n        setContactData(results);\n      } catch (e) {\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getContacts();\n  }, [apiUrl]);\n\n  const handleToggleSizeData = (url) => {\n    switch (url) {\n      case 'big':\n        return setApiUrl(bigApiUrl);\n      case 'small':\n        return setApiUrl(smallApiUrl);\n\n      default:\n        break;\n    }\n  };\n\n  const [serchValue, setSerchValue] = useState('');\n\n  const handlerSearchInput = (value) => {\n    setSerchValue(value);\n  };\n\n  const getFilterData = () => {\n    if (!serchValue) {\n      return contactData;\n    }\n    return contactData.filter((contact) => {\n      return Object.values(contact).some((value) =>\n        String(value).includes(serchValue)\n      );\n    });\n  };\n  const dataAfterFilter = getFilterData();\n\n  const firstCurrentPage = 1;\n  const [currentPage, setCurrentPage] = useState(firstCurrentPage);\n  const rowsPerPage = 7;\n\n  const indexOfLastElement = useMemo(() => currentPage * rowsPerPage, [\n    currentPage,\n    rowsPerPage,\n  ]);\n  const indexOfFirstElement = useMemo(() => indexOfLastElement - rowsPerPage, [\n    indexOfLastElement,\n    rowsPerPage,\n  ]);\n\n  const dataPerPage = useMemo(\n    () => dataAfterFilter.slice(indexOfFirstElement, indexOfLastElement),\n    [indexOfLastElement, indexOfFirstElement, dataAfterFilter]\n  );\n\n  const totalPages = useMemo(\n    () => Math.ceil(dataAfterFilter.length / rowsPerPage),\n    [dataAfterFilter, rowsPerPage]\n  );\n  let pages = [];\n  for (let i = 1; i <= totalPages; i++) {\n    pages.push(i);\n  }\n\n  const handleClickPage = (page) => {\n    setCurrentPage(page);\n  };\n\n  const handlePaginationPages = (e) => {\n    const value = e.target.innerText;\n    switch (value) {\n      case 'Previous':\n        if (currentPage > 1) {\n          return setCurrentPage(currentPage - 1);\n        } else {\n          break;\n        }\n      case 'Next':\n        if (currentPage < pages.length) {\n          return setCurrentPage(currentPage + 1);\n        } else {\n          break;\n        }\n      default:\n        break;\n    }\n  };\n\n  const [targetValue, setTargetValue] = useState('');\n  const [direction, setDirection] = useState('');\n\n  const sortTable = (val) => {\n    setTargetValue(val);\n    if (direction === '' || direction === 'asc') {\n      const sort = dataAfterFilter\n        .slice()\n        .sort((a, b) => (a[val] > b[val] ? 1 : -1));\n      setContactData(sort);\n      setDirection('desc');\n    }\n    if (direction === 'desc') {\n      const sort = dataAfterFilter\n        .slice()\n        .sort((a, b) => (a[val] < b[val] ? 1 : -1));\n      setContactData(sort);\n      setDirection('asc');\n    }\n  };\n\n  const [addContact, setAddContact] = useState();\n\n  const addContactData = (con) => {\n    setAddContact(con);\n  };\n\n  const dataAfterAddContact = useMemo(\n    () =>\n      [addContact, ...dataAfterFilter].slice(\n        indexOfFirstElement,\n        indexOfLastElement\n      ),\n    [addContact, dataAfterFilter, indexOfFirstElement, indexOfLastElement]\n  );\n\n  return (\n    <Container>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <HomePage\n          data={addContact ? dataAfterAddContact : dataPerPage}\n          handleToggleSizeData={handleToggleSizeData}\n          pages={pages}\n          handleClickPage={handleClickPage}\n          sortTable={sortTable}\n          direction={direction}\n          targetValue={targetValue}\n          handlerSearchInput={handlerSearchInput}\n          handlePaginationPages={handlePaginationPages}\n          currentPage={currentPage}\n          setAddContact={setAddContact}\n          addContactData={addContactData}\n        />\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}